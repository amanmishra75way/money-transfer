{
  "swagger": "2.0",
  "info": {
    "title": "Banking API",
    "description": "Complete API documentation for banking application",
    "version": "1.0.0"
  },
  "host": "localhost:5000",
  "basePath": "/api",
  "schemes": ["http", "https"],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Users"],
        "summary": "Register a new user",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string", "example": "John Doe" },
                "email": { "type": "string", "example": "john@example.com" },
                "password": { "type": "string", "example": "password123" },
                "role": {
                  "type": "string",
                  "enum": ["USER", "ADMIN"],
                  "example": "USER"
                }
              },
              "required": ["name", "email", "password"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "name": { "type": "string" },
                        "email": { "type": "string" },
                        "role": { "type": "string" }
                      }
                    },
                    "accessToken": { "type": "string" },
                    "refreshToken": { "type": "string" }
                  }
                },
                "message": { "type": "string" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "Login user",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string", "example": "john@example.com" },
                "password": { "type": "string", "example": "password123" }
              },
              "required": ["email", "password"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "name": { "type": "string" },
                        "email": { "type": "string" },
                        "role": { "type": "string" }
                      }
                    },
                    "accessToken": { "type": "string" },
                    "refreshToken": { "type": "string" }
                  }
                },
                "message": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/users/profile": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user profile",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                },
                "message": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update user profile",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string", "example": "John Doe Updated" },
                "email": { "type": "string", "example": "john.updated@example.com" },
                "password": { "type": "string", "example": "newpassword123" },
                "role": { "type": "string", "enum": ["USER", "ADMIN"] }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User profile updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                },
                "message": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "Logout user",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": { "type": "null" },
                "message": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/users/forgot-password": {
      "post": {
        "tags": ["Users"],
        "summary": "Request password reset",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string", "example": "john@example.com" }
              },
              "required": ["email"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reset password email sent",
            "schema": {
              "type": "object",
              "properties": {
                "data": { "type": "null" },
                "message": { "type": "string" }
              }
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/users/reset-password": {
      "post": {
        "tags": ["Users"],
        "summary": "Reset password",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": { "type": "string", "example": "reset-token-here" },
                "newPassword": { "type": "string", "example": "newpassword123" }
              },
              "required": ["token", "newPassword"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": { "type": "null" },
                "message": { "type": "string" }
              }
            }
          },
          "400": {
            "description": "Invalid or expired reset token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/users/change-password": {
      "post": {
        "tags": ["Users"],
        "summary": "Change password",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "currentPassword": { "type": "string", "example": "oldpassword123" },
                "newPassword": { "type": "string", "example": "newpassword123" }
              },
              "required": ["currentPassword", "newPassword"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": { "type": "null" },
                "message": { "type": "string" }
              }
            }
          },
          "400": {
            "description": "Current password is incorrect",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/users/refresh-token": {
      "post": {
        "tags": ["Users"],
        "summary": "Refresh access token",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "refreshToken": { "type": "string", "example": "refresh-token-here" }
              },
              "required": ["refreshToken"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tokens refreshed successfully",
            "schema": {
              "type": "object",
              "properties": {
                "accessToken": { "type": "string" },
                "refreshToken": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/users/admin/all": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users (Admin only)",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                },
                "message": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden (Admin access required)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/transactions/request": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Create a new transaction",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTransactionDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Transaction created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Transaction"
                },
                "message": { "type": "string" }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., insufficient balance)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/transactions/my-transactions": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get user's transactions",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Transactions retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Transaction"
                  }
                },
                "message": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/transactions/stats": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get transaction statistics",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Transaction statistics retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": { "type": "string" },
                      "count": { "type": "number" },
                      "totalAmount": { "type": "number" }
                    }
                  }
                },
                "message": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/transactions/{id}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get transaction by ID",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Transaction ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Transaction"
                },
                "message": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Transaction not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/transactions/admin/all": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get all transactions (Admin only)",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "All transactions retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Transaction"
                  }
                },
                "message": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden (Admin access required)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/transactions/admin/pending": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get pending transactions (Admin only)",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Pending transactions retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Transaction"
                  }
                },
                "message": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden (Admin access required)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/transactions/{id}/approve": {
      "put": {
        "tags": ["Transactions"],
        "summary": "Approve/reject transaction (Admin only)",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Transaction ID"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApproveTransactionDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Transaction"
                },
                "message": { "type": "string" }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., transaction already processed)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden (Admin access required)",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Transaction not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "JWT token. Example: Bearer {token}"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "_id": { "type": "string" },
        "name": { "type": "string" },
        "email": { "type": "string" },
        "role": { "type": "string", "enum": ["USER", "ADMIN"] },
        "active": { "type": "boolean" },
        "balance": { "type": "number" },
        "createdAt": { "type": "string", "format": "date-time" },
        "updatedAt": { "type": "string", "format": "date-time" }
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "_id": { "type": "string" },
        "fromId": { "type": "string" },
        "toId": { "type": "string" },
        "amount": { "type": "number" },
        "type": {
          "type": "string",
          "enum": ["transfer", "deposit", "withdrawal", "payment"]
        },
        "status": {
          "type": "string",
          "enum": ["pending", "approved", "rejected", "completed"]
        },
        "isInternational": { "type": "boolean" },
        "commission": { "type": "number" },
        "description": { "type": "string" },
        "processedBy": { "type": "string" },
        "processedAt": { "type": "string", "format": "date-time" },
        "remarks": { "type": "string" },
        "createdAt": { "type": "string", "format": "date-time" },
        "updatedAt": { "type": "string", "format": "date-time" }
      }
    },
    "CreateTransactionDTO": {
      "type": "object",
      "properties": {
        "toId": { "type": "string", "example": "507f1f77bcf86cd799439011" },
        "amount": { "type": "number", "example": 100.5 },
        "type": {
          "type": "string",
          "enum": ["transfer", "deposit", "withdrawal", "payment"],
          "example": "transfer"
        },
        "description": { "type": "string", "example": "Monthly rent payment" },
        "isInternational": { "type": "boolean", "example": false }
      },
      "required": ["toId", "amount", "type"]
    },
    "ApproveTransactionDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["approved", "rejected", "completed"],
          "example": "approved"
        },
        "remarks": { "type": "string", "example": "Payment verified" }
      },
      "required": ["status"]
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "data": { "type": "null" },
        "message": { "type": "string" }
      }
    }
  },
  "tags": [
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Transactions",
      "description": "Transaction management endpoints"
    }
  ]
}
